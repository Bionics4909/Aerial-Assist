// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc4909.RealRobo2;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
//import java.util.Vector;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainLeftFront;
    public static SpeedController driveTrainRightFront;
    public static SpeedController driveTrainLeftRear;
    public static SpeedController driveTrainRightRear;
    public static RobotDrive driveTrainRobotDrive;
    public static SpeedController armWheelsShaftMotor;
    public static SpeedController frameWheelsShaftMotor;
    public static SpeedController platformMotor;
    public static Encoder platformShaftEncoder;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLeftFront = new Talon(1, 1);
	LiveWindow.addActuator("Drive Train", "Left Front", (Talon) driveTrainLeftFront);
        
        driveTrainRightFront = new Talon(1, 2);
	LiveWindow.addActuator("Drive Train", "Right Front", (Talon) driveTrainRightFront);
        
        driveTrainLeftRear = new Talon(1, 3);
	LiveWindow.addActuator("Drive Train", "Left Rear", (Talon) driveTrainLeftRear);
        
        driveTrainRightRear = new Talon(1, 4);
	LiveWindow.addActuator("Drive Train", "Right Rear", (Talon) driveTrainRightRear);
        
        driveTrainRobotDrive = new RobotDrive(driveTrainLeftFront, driveTrainLeftRear,
              driveTrainRightFront, driveTrainRightRear);
	
        driveTrainRobotDrive.setSafetyEnabled(true);
        driveTrainRobotDrive.setExpiration(0.1);
        driveTrainRobotDrive.setSensitivity(0.5);
        driveTrainRobotDrive.setMaxOutput(1.0);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
       
        armWheelsShaftMotor = new Talon(1, 5);
	LiveWindow.addActuator("Arm Wheels", "Shaft Motor", (Talon) armWheelsShaftMotor);
        
        frameWheelsShaftMotor = new Talon(1, 6);
	LiveWindow.addActuator("Frame Wheels", "Shaft Motor", (Talon) frameWheelsShaftMotor);
        
        platformMotor = new Talon(1, 7);
	LiveWindow.addActuator("Platform", "Motor", (Talon) platformMotor);
        
        platformShaftEncoder = new Encoder(1, 1, 1, 2, false, EncodingType.k4X);
	LiveWindow.addSensor("Platform", "Shaft Encoder", platformShaftEncoder);
        platformShaftEncoder.setDistancePerPulse(1.0);
        platformShaftEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        platformShaftEncoder.start();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
