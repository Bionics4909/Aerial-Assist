// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc4909.RealRobo2.commands;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.tables.ITable;
import org.usfirst.frc4909.RealRobo2.Robot;
/**
 *
 */
public class  AutonomousCommand extends Command {
    Timer autoTimer;
    boolean allDone;
    double p1duration, p2duration, p3duration;
    NetworkTable mainTable;
    ITable netTable;
    double forwardSpeed,turnSpeed;
    
    public AutonomousCommand() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	autoTimer= new Timer();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        setTimeout(10);
        allDone=false;
        autoTimer.reset();
        autoTimer.start(); 
        //Robot.driveTrain.driveStraight(0.8);
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        //Get current duration values from SmartDashboard
        p1duration= netTable.getNumber("Phase 1 Duration");
        p2duration= netTable.getNumber("Phase 2 Duration");
        p3duration= netTable.getNumber("Phase 3 Duration");
        forwardSpeed=netTable.getNumber("Forward Speed");
        turnSpeed=netTable.getNumber("Turn Speed");
        double p1stop=p1duration;
        double p2stop=p1stop+p2duration;
        double p3stop=p2stop+p3duration;
        if (autoTimer.get()<p1stop){
            Robot.driveTrain.driveStraight(forwardSpeed);
        }
        else if (autoTimer.get()<p2stop){
            Robot.driveTrain.driveStraight(0.0);
        }
        else if (autoTimer.get()<p3stop){
   //         Robot.driveTrain.driveStraight(-forwardSpeed+.07);
            Robot.driveTrain.turnInPlace(turnSpeed);
        }
        else{
            allDone=true;
        }
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return allDone || isTimedOut();
    }
    // Called once after isFinished returns true
    protected void end() {
        Robot.driveTrain.stop();
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
}
